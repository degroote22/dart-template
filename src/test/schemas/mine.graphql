type addressAutosuggestResponse {
  locationName: String!
  latitude: Float!
  longitude: Float!
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

input CreatePostCommentInput {
  postId: Int!
  comment: String!
}

"""The output of our create `PostComment` mutation."""
type CreatePostCommentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostComment` that was created by this mutation."""
  postComment: PostComment

  """Reads a single `Post` that is related to this `PostComment`."""
  postByPostId: Post

  """Reads a single `User` that is related to this `PostComment`."""
  userByAuthorId: User

  """An edge for our `PostComment`. May be used by Relay 1."""
  postCommentEdge(
    """The method to use when ordering `PostComment`."""
    orderBy: [PostCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostCommentsEdge
}

"""All input for the create `Post` mutation."""
input CreatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Post` to be created by this mutation."""
  post: PostInput!
}

"""The output of our create `Post` mutation."""
type CreatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was created by this mutation."""
  post: Post

  """Reads a single `User` that is related to this `Post`."""
  userByAuthorId: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

input CreatePostVoteInput {
  postId: Int!
  vote: Boolean!
}

"""The output of our create `PostVote` mutation."""
type CreatePostVotePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostVote` that was created by this mutation."""
  postVote: PostVote

  """Reads a single `Post` that is related to this `PostVote`."""
  postByPostId: Post

  """Reads a single `User` that is related to this `PostVote`."""
  userByAuthorId: User

  """An edge for our `PostVote`. May be used by Relay 1."""
  postVoteEdge(
    """The method to use when ordering `PostVote`."""
    orderBy: [PostVotesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostVotesEdge
}

input CreateUserInput {
  nickname: String!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deletePostComment` mutation."""
input DeletePostCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PostComment` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `PostComment` mutation."""
type DeletePostCommentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostComment` that was deleted by this mutation."""
  postComment: PostComment
  deletedPostCommentId: ID

  """Reads a single `Post` that is related to this `PostComment`."""
  postByPostId: Post

  """Reads a single `User` that is related to this `PostComment`."""
  userByAuthorId: User

  """An edge for our `PostComment`. May be used by Relay 1."""
  postCommentEdge(
    """The method to use when ordering `PostComment`."""
    orderBy: [PostCommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostCommentsEdge
}

"""All input for the `deletePost` mutation."""
input DeletePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePostVote` mutation."""
input DeletePostVoteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PostVote` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `PostVote` mutation."""
type DeletePostVotePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostVote` that was deleted by this mutation."""
  postVote: PostVote
  deletedPostVoteId: ID

  """Reads a single `Post` that is related to this `PostVote`."""
  postByPostId: Post

  """Reads a single `User` that is related to this `PostVote`."""
  userByAuthorId: User

  """An edge for our `PostVote`. May be used by Relay 1."""
  postVoteEdge(
    """The method to use when ordering `PostVote`."""
    orderBy: [PostVotesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostVotesEdge
}

input LocationBias {
  lat: Float!
  lng: Float!
}

type Mutation {
  reportPost(nodeId: ID!, reason: String!): Boolean!
  reportComment(nodeId: ID!, reason: String!): Boolean!
  editNickname(nickname: String!): Boolean!
  createUser(input: CreateUserInput!): CreateUserPayload

  """Creates a single `Post`."""
  createPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostInput!
  ): CreatePostPayload

  """Deletes a single `Post` using its globally unique id."""
  deletePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostInput!
  ): UpdatePostPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser: UpdateUserPayload

  """Creates a single `PostComment`."""
  createPostComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostCommentInput!
  ): CreatePostCommentPayload

  """Creates a single `PostVote`."""
  createPostVote(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostVoteInput!
  ): CreatePostVotePayload

  """Deletes a single `PostComment` using its globally unique id."""
  deletePostComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostCommentInput!
  ): DeletePostCommentPayload

  """Updates a single `PostVote` using its globally unique id and a patch."""
  updatePostVote(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostVoteInput!
  ): UpdatePostVotePayload

  """Deletes a single `PostVote` using its globally unique id."""
  deletePostVote(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostVoteInput!
  ): DeletePostVotePayload
}

type MyVote {
  nodeId: ID!
  vote: Boolean!
  authorId: Int!
  postId: Int!
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Post implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  deleted: Boolean!
  authorId: Int!
  createdAt: Datetime
  headline: String!
  locationName: String!
  locationAddress: String!
  pictureUrls: [String]!
  score: Float!
  voteSum: Int!
  price: BigFloat
  oldPrice: BigFloat
  about: String
  geog: String!

  """Reads a single `User` that is related to this `Post`."""
  userByAuthorId: User

  """Reads and enables pagination through a set of `PostVote`."""
  postVotesByPostId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostVote`."""
    orderBy: [PostVotesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostVoteCondition
  ): PostVotesConnection!

  """Reads and enables pagination through a set of `PostComment`."""
  postCommentsByPostId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostComment`."""
    orderBy: [PostCommentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCommentCondition
  ): PostCommentsConnection!
  lat: Float
  lng: Float
}

type PostComment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  postId: Int!
  authorId: Int!
  createdAt: Datetime
  commentText: String!

  """Reads a single `Post` that is related to this `PostComment`."""
  postByPostId: Post

  """Reads a single `User` that is related to this `PostComment`."""
  userByAuthorId: User
}

"""
A condition to be used against `PostComment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PostCommentCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `postId` field."""
  postId: Int

  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `commentText` field."""
  commentText: String
}

"""A connection to a list of `PostComment` values."""
type PostCommentsConnection {
  """A list of `PostComment` objects."""
  nodes: [PostComment]!

  """
  A list of edges which contains the `PostComment` and cursor to aid in pagination.
  """
  edges: [PostCommentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PostComment` you could get from the connection."""
  totalCount: Int
}

"""A `PostComment` edge in the connection."""
type PostCommentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PostComment` at the end of the edge."""
  node: PostComment
}

"""Methods to use when ordering `PostComment`."""
enum PostCommentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POST_ID_ASC
  POST_ID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  COMMENT_TEXT_ASC
  COMMENT_TEXT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `deleted` field."""
  deleted: Boolean

  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `headline` field."""
  headline: String

  """Checks for equality with the object’s `locationName` field."""
  locationName: String

  """Checks for equality with the object’s `locationAddress` field."""
  locationAddress: String

  """Checks for equality with the object’s `pictureUrls` field."""
  pictureUrls: [String]

  """Checks for equality with the object’s `score` field."""
  score: Float

  """Checks for equality with the object’s `voteSum` field."""
  voteSum: Int

  """Checks for equality with the object’s `price` field."""
  price: BigFloat

  """Checks for equality with the object’s `oldPrice` field."""
  oldPrice: BigFloat

  """Checks for equality with the object’s `about` field."""
  about: String

  """Checks for equality with the object’s `geog` field."""
  geog: String
}

"""An input for mutations affecting `Post`"""
input PostInput {
  headline: String!
  locationName: String!
  locationAddress: String!
  pictureUrls: [String]!
  price: BigFloat
  oldPrice: BigFloat
  about: String
  lat: Float!
  lng: Float!
}

"""A connection to a list of `Post` values."""
type PostsConnection {
  """A list of `Post` objects."""
  nodes: [Post]!

  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [PostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int
}

"""A `Post` edge in the connection."""
type PostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post
}

"""Methods to use when ordering `Post`."""
enum PostsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  DELETED_ASC
  DELETED_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  HEADLINE_ASC
  HEADLINE_DESC
  LOCATION_NAME_ASC
  LOCATION_NAME_DESC
  LOCATION_ADDRESS_ASC
  LOCATION_ADDRESS_DESC
  PICTURE_URLS_ASC
  PICTURE_URLS_DESC
  SCORE_ASC
  SCORE_DESC
  VOTE_SUM_ASC
  VOTE_SUM_DESC
  PRICE_ASC
  PRICE_DESC
  OLD_PRICE_ASC
  OLD_PRICE_DESC
  ABOUT_ASC
  ABOUT_DESC
  GEOG_ASC
  GEOG_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type PostVote implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  postId: Int!
  authorId: Int!
  vote: Boolean!

  """Reads a single `Post` that is related to this `PostVote`."""
  postByPostId: Post

  """Reads a single `User` that is related to this `PostVote`."""
  userByAuthorId: User
}

"""
A condition to be used against `PostVote` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PostVoteCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `postId` field."""
  postId: Int

  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `vote` field."""
  vote: Boolean
}

"""
Represents an update to a `PostVote`. Fields that are set will be updated.
"""
input PostVotePatch {
  id: Int
  postId: Int
  authorId: Int
  vote: Boolean
}

"""A connection to a list of `PostVote` values."""
type PostVotesConnection {
  """A list of `PostVote` objects."""
  nodes: [PostVote]!

  """
  A list of edges which contains the `PostVote` and cursor to aid in pagination.
  """
  edges: [PostVotesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PostVote` you could get from the connection."""
  totalCount: Int
}

"""A `PostVote` edge in the connection."""
type PostVotesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PostVote` at the end of the edge."""
  node: PostVote
}

"""Methods to use when ordering `PostVote`."""
enum PostVotesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  POST_ID_ASC
  POST_ID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  VOTE_ASC
  VOTE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Query {
  myVoteOnPost(postId: Int!): MyVote
  myVoteOnPosts(postIds: [Int!]!): [MyVote]!
  addressAutosuggest(search: String!): [addressAutosuggestResponse!]!
  searchPlace(input: SearchPlaceInput!): [SearchPlaceResponse!]!
  locationName(lat: Float!, lng: Float!): String!
  test: String!
  me: User
  postByNodeId(nodeId: ID!): Post
  userById(id: Int!): User

  """Reads and enables pagination through a set of `Post`."""
  searchPosts(
    lat: Float!
    lng: Float!
    km: Int!

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): PostsConnection!
}

input SearchPlaceInput {
  query: String!
  locationBias: LocationBias
}

type SearchPlaceResponse {
  lat: Float!
  lng: Float!
  address: String!
  name: String!
}

type searchPostsByLocationLatLngResponse {
  connection: PostsConnection!
  locationName: String!
}

type searchPostsByLocationNameResponse {
  connection: PostsConnection!
  latitude: Float!
  longitude: Float!
}

"""The output of our update `Post` mutation."""
type UpdatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was updated by this mutation."""
  post: Post

  """Reads a single `User` that is related to this `Post`."""
  userByAuthorId: User

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `updatePostVote` mutation."""
input UpdatePostVoteInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PostVote` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PostVote` being updated.
  """
  postVotePatch: PostVotePatch!
}

"""The output of our update `PostVote` mutation."""
type UpdatePostVotePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PostVote` that was updated by this mutation."""
  postVote: PostVote

  """Reads a single `Post` that is related to this `PostVote`."""
  postByPostId: Post

  """Reads a single `User` that is related to this `PostVote`."""
  userByAuthorId: User

  """An edge for our `PostVote`. May be used by Relay 1."""
  postVoteEdge(
    """The method to use when ordering `PostVote`."""
    orderBy: [PostVotesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostVotesEdge
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""Um usuário (cliente) do sistema."""
type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """ID único que é chave no PGSQL."""
  id: Int!

  """ID único que é chave no Firebase."""
  firebaseId: String!

  """Apelido do usuário."""
  nickname: String!

  """Telefone único."""
  phone: String!

  """Quando o usuário foi criado."""
  createdAt: Datetime
  deactivated: Boolean!

  """Reads and enables pagination through a set of `Post`."""
  postsByAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): PostsConnection!

  """Reads and enables pagination through a set of `PostVote`."""
  postVotesByAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostVote`."""
    orderBy: [PostVotesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostVoteCondition
  ): PostVotesConnection!

  """Reads and enables pagination through a set of `PostComment`."""
  postCommentsByAuthorId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostComment`."""
    orderBy: [PostCommentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCommentCondition
  ): PostCommentsConnection!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FIREBASE_ID_ASC
  FIREBASE_ID_DESC
  NICKNAME_ASC
  NICKNAME_DESC
  PHONE_ASC
  PHONE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DEACTIVATED_ASC
  DEACTIVATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

